import { doc, getDoc } from 'firebase/firestore';
import { db } from '../firebase';
import { GlobalSettings } from '../types';

export class GlobalSettingsService {
  private static instance: GlobalSettingsService;
  private settings: GlobalSettings | null = null;
  private lastFetch: number = 0;
  private readonly CACHE_DURATION = 5 * 60 * 1000; // 5Î∂Ñ Ï∫êÏãú

  private constructor() {}

  static getInstance(): GlobalSettingsService {
    if (!GlobalSettingsService.instance) {
      GlobalSettingsService.instance = new GlobalSettingsService();
    }
    return GlobalSettingsService.instance;
  }

  async getSettings(): Promise<GlobalSettings> {
    // Ï∫êÏãú ÌôïÏù∏
    if (this.settings && Date.now() - this.lastFetch < this.CACHE_DURATION) {
      return this.settings;
    }

    try {
      // DBÏóêÏÑú Î°úÎìú
      const docRef = doc(db, 'global', 'settings');
      const docSnap = await getDoc(docRef);
      
      if (docSnap.exists()) {
        this.settings = docSnap.data() as GlobalSettings;
      } else {
        // Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
        this.settings = this.getDefaultSettings();
      }
      
      this.lastFetch = Date.now();
      return this.settings;
    } catch (error) {
      console.error('Í∏ÄÎ°úÎ≤å ÏÑ§Ï†ï Î°úÎìú Ïã§Ìå®:', error);
      // Ïò§Î•ò Ïãú Í∏∞Î≥∏Í∞í Î∞òÌôò
      return this.getDefaultSettings();
    }
  }

  // Ï∫êÏãú Î¨¥Ìö®Ìôî (ÏÑ§Ï†ï Î≥ÄÍ≤Ω Ïãú ÏÇ¨Ïö©)
  invalidateCache(): void {
    this.settings = null;
    this.lastFetch = 0;
  }

  private getDefaultSettings(): GlobalSettings {
    return {
      guidelines: {
        seroGuideline: `ÎãπÏã†ÏùÄ 'ÏÑ∏Î°ú'ÎùºÎäî Ïù¥Î¶ÑÏùò AI Ïñ¥ÏãúÏä§ÌÑ¥Ìä∏ÏûÖÎãàÎã§. 
        ÏÇ¨Ïö©ÏûêÏôÄ ÏûêÏó∞Ïä§ÎüΩÍ≥† ÏπúÍ∑ºÌïú ÎåÄÌôîÎ•º ÎÇòÎàÑÎ©∞, 
        ÏÇ¨Ïö©ÏûêÏùò ÏßàÎ¨∏Ïóê Ï†ïÌôïÌïòÍ≥† ÎèÑÏõÄÏù¥ ÎêòÎäî ÎãµÎ≥ÄÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§. 
        Ìï≠ÏÉÅ Ï°¥ÎåìÎßêÏùÑ ÏÇ¨Ïö©ÌïòÍ≥†, ÏπúÍ∑ºÌïòÎ©¥ÏÑúÎèÑ Ï†ÑÎ¨∏Ï†ÅÏù∏ ÌÜ§ÏùÑ Ïú†ÏßÄÌï©ÎãàÎã§.`
      },
      personality: {
        defaultTypeSettings: {
          "Î∂ÑÏúÑÍ∏∞": ["Ïñ¥Î•∏Ïä§Îü¨ÏõÄ", "Îî∞ÎúªÌï®"],
          "ÏÑ±Í≤©": ["Ïã†Ï§ëÌï®", "Î∂ÑÏÑùÏ†Å"],
          "Í∞êÏ†ïÌëúÌòÑ": ["Ïù¥Î™®Ìã∞ÏΩò Ïä§ÌÉÄÏùº", "ÌÖçÏä§Ìä∏ Ïù¥Î™®Ìã∞ÏΩò Ïä§ÌÉÄÏùº"]
        },
        maxMoodTags: 2,
        maxPersonalityTags: 4,
        maxExpressionPrefs: 4,
        types: [
          {
            categoryName: "Î∂ÑÏúÑÍ∏∞",
            type: "tag",
            items: ["Ïñ¥Î•∏Ïä§Îü¨ÏõÄ", "Ï≤≠ÎÖÑÏä§Îü¨ÏõÄ", "ÏÜåÎÖÑ/ÏÜåÎÖÄÏä§Îü¨ÏõÄ", "Ï§ëÌõÑÌï®", "Îî∞ÎúªÌï®", "Ï∞®Í∞ÄÏõÄ", "Ïú†ÏæåÌï®", "ÏßÑÏßÄÌï®"]
          },
          {
            categoryName: "ÏÑ±Í≤©",
            type: "tag", 
            items: ["Ïã†Ï§ëÌï®", "Ï∂©ÎèôÏ†Å", "Î∂ÑÏÑùÏ†Å", "Í∞êÏÑ±Ï†Å", "ÍπåÏπ†Ìï®", "Î∞úÎûÑÌï®", "ÎèÑÎ∞úÏ†Å", "Ï†ÅÍ∑πÏ†Å", "ÏàòÎèôÏ†Å", "ÎÇ¥Ìñ•Ï†Å", "Ïô∏Ìñ•Ï†Å"]
          },
          {
            categoryName: "Í∞êÏ†ïÌëúÌòÑ",
            type: "example",
            items: [
              { label: "Ïù¥Î™®Ìã∞ÏΩò Ïä§ÌÉÄÏùº", example: "üòäüòÇ" },
              { label: "ÌÖçÏä§Ìä∏ Ïù¥Î™®Ìã∞ÏΩò Ïä§ÌÉÄÏùº", example: "( ‚Ä¢·¥ó‚Ä¢Õà )" },
              { label: "ÏûêÏùå ÎåÄÌôîÏ≤¥ Ïä§ÌÉÄÏùº", example: "„Öã„Öã„Öã„Öã" },
              { label: "Í∞êÌÉÑÏÇ¨/ÏùòÏÑ±Ïñ¥ Ïä§ÌÉÄÏùº", example: "Ïò§! Ìóâ! ÏôÄÏö∞!" },
              { label: "Í∏¥Ïû•Í∞ê/ÎìúÎùºÎßàÌã± Ïä§ÌÉÄÏùº", example: "...... (Ïà®Ï£ΩÏûÑ)" },
              { label: "Í≤©ÏãùÏ≤¥", example: "~ÏûÖÎãàÎã§/Ìï©ÎãàÎã§" },
              { label: "Î∞òÎßêÏ≤¥", example: "~Ïïº/Ìï¥" },
              { label: "Îã®ÎãµÌòï", example: "„Öá„Öá „Ñ¥„Ñ¥" },
              { label: "ÏÑúÏà†Ìòï", example: "Ïùå, ÎÇòÎäî Ïù¥Îü∞ ÏÉùÍ∞ÅÏùÑ Ìï¥Î¥§Ïñ¥..." }
            ]
          }
        ]
      },
      system: {
        tmtRatio: 40,
        extractInterval: 10,
        maxMessageLength: 1000
      },
      ai: {
        model: "gpt-4o",
        temperature: 0.7,
        maxTokens: 2000
      }
    };
  }
} 